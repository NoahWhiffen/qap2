//      QAP2 - Java
// Author: Noah Whiffen - SD12
// Date: February 8th, 2025 - February 9th, 2025

// Distance formula 
// double d = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));
// Slope Formula 
// double m = (y2 - y1) / (x2 - x1);

package classes;

public class MyRectangle {
    
    MyPoint a;
    MyPoint b;
    MyPoint c;
    MyPoint d;

    public MyRectangle(MyPoint a, MyPoint c) {
        this.a = a;
        this.c = c;

        MyPoint[] points = findOtherPoints(a, c);
        this.b = points[0];
        this.d = points[1];
    }

    public MyPoint[] findOtherPoints(MyPoint a, MyPoint c) {
        // Find midpoint of diagonal AC
        double mx = (a.getX() + c.getX()) / 2;
        double my = (a.getY() + c.getY()) / 2;

        // Find the direction vector AC
        double dx = c.getX() - a.getX();
        double dy = c.getY() - a.getY();

        // Rotate the vector AC by 90 degrees counter-clockwise
        double bx = mx - dy;
        double by = my + dx;

        // Rotate the vector AC 90 degrees clockwise
        double dx2 = mx + dy;
        double dy2 = my - dx;

        // Create points b and d
        b = new MyPoint(bx, by);
        d = new MyPoint(dx2, dy2);
        return new MyPoint[] {b, d};
    }

    public String toString() {
        return "My Rectangle: [a = " + a + " b = " + b + " c = " + c + " d = " + d;
    }

    public double getLength() {
        double length = a.distance(b);
        return length;
    }

    public double getWidth() {
        double width = b.distance(c);
        return width;
    }

    public double getPerimeter() {
        double length = getLength();
        double width = getWidth();
        double perimeter = 2 * (length + width);
        return perimeter;
    }

    public double getArea() {
        double length = getLength();
        double width = getWidth();
        return length * width;
    }

    public boolean isValidRectangle() {     // This method was generated by chatGPT.
                                            // All other code is my own but I did a
        // Vector AB                           triangle validation in the practice,
        double ax = b.getX() - a.getX();    // which I thought was interesting so I
        double ay = b.getY() - a.getY();    // wanted to be consistent and do the same here. :)
        
        // Vector BC
        double bx = c.getX() - b.getX();
        double by = c.getY() - b.getY();
        
        // Vector CD
        double cx = d.getX() - c.getX();
        double cy = d.getY() - c.getY();
        
        // Vector DA
        double dx = a.getX() - d.getX();
        double dy = a.getY() - d.getY();
    
        // Check if all angles are 90 degrees (dot product = 0 for perpendicular vectors)
        if (ax * bx + ay * by != 0) { // AB and BC
            return false;
        }
        if (bx * cx + by * cy != 0) { // BC and CD
            return false;
        }
        if (cx * dx + cy * dy != 0) { // CD and DA
            return false;
        }
        if (dx * ax + dy * ay != 0) { // DA and AB
            return false;
        }
    
        return true; // All angles are 90 degrees, so it's a valid rectangle
    }

    public MyPoint getA() {
        return a;
    }

    public MyPoint getB() {
        return b;
    }

    public MyPoint getC() {
        return c;
    }

    public MyPoint getD() {
        return d;
    }

    public void setA(MyPoint a) {
        this.a = a;
    }

    public void setC(MyPoint c) {
        this.c = c;
    }

}
